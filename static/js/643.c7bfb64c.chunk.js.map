{"version":3,"file":"static/js/643.c7bfb64c.chunk.js","mappings":"yBAAO,ICIHA,ECJQC,EAAgB,SAAhBA,GAAgB,OAAhBA,EAAgB,cAAhBA,EAAgB,YAAhBA,EAAgB,YAAhBA,CAAgB,MDM5BC,UAAY,SAACC,GACPA,EAAEC,OAASH,EAAiBI,MAC9BC,GAAoB,WAClBC,YAAYN,EAAiBO,KAC/B,GDV+B,KCY/BC,aAAaT,EAEjB,EAEA,IAAMM,EAAsB,SAACI,EAAsBC,GACjD,IAAIC,EAAU,EACRC,EAAYC,KAAKC,MAUvBf,EAAYgB,KAAKC,YARjB,SAASC,IACP,IAAMC,EAAUL,KAAKC,MACfK,EAAWP,EAAYD,EAAUD,EACvCX,EAAYgB,KAAKC,WAAWC,EAAMP,GAAYQ,EAAUC,IACxDR,GAAW,EACXF,GACF,GAEkCC,EACpC,C","sources":["service/timer/constants.ts","service/workers/timerWorker.ts","service/workers/types.ts"],"sourcesContent":["export const ONE_SECOND_INTERVAL = 1000;\n","/* eslint-disable no-restricted-globals */\nimport { ONE_SECOND_INTERVAL } from '../timer/constants';\nimport { TimerWorkerEvent } from './types';\n\nlet timeoutId: number;\n\nonmessage = (e: MessageEvent<string>) => {\n  if (e.data === TimerWorkerEvent.Start) {\n    accurateSetInterval(function () {\n      postMessage(TimerWorkerEvent.Tick);\n    }, ONE_SECOND_INTERVAL);\n  } else {\n    clearTimeout(timeoutId);\n  }\n};\n\nconst accurateSetInterval = (callback: () => void, interval: number) => {\n  let counter = 1;\n  const startTime = Date.now();\n\n  function main() {\n    const nowTime = Date.now();\n    const nextTime = startTime + counter * interval;\n    timeoutId = self.setTimeout(main, interval - (nowTime - nextTime));\n    counter += 1;\n    callback();\n  }\n\n  timeoutId = self.setTimeout(main, interval);\n};\n\nexport {};\n","export enum TimerWorkerEvent {\n  Start = 'start',\n  Stop = 'stop',\n  Tick = 'tick',\n}\n"],"names":["timeoutId","TimerWorkerEvent","onmessage","e","data","Start","accurateSetInterval","postMessage","Tick","clearTimeout","callback","interval","counter","startTime","Date","now","self","setTimeout","main","nowTime","nextTime"],"sourceRoot":""}